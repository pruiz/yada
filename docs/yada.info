This is yada.info, produced by makeinfo version 4.8 from yada.texi.

   Copyright (C) 2004,2005 dev/IT

     Permission is granted to copy, distribute and/or modify this
     document under the terms of the GNU Free Documentation License,
     Version 1.2 or any later version published by the Free Software
     Foundation; with no Invariant Sections, no Front-Cover Texts, and
     no Back-Cover Texts.  A copy of the license is included in the
     section entitled `GNU Free Documentation License'.


File: yada.info,  Node: Top,  Up: (dir)

yada
****

   This manual is for yada (yet another database abstraction) version
0.11.0.

* Menu:

* Introduction::
* Installing::
* API::
* Module API::
* Examples::
* Index::


File: yada.info,  Node: Introduction,  Next: Installing,  Prev: Top,  Up: Top

1 Introduction
**************

Yada is a c library that abstracts SQL databases aiming at allowing
transparent use of multiple databases.  The goal in mind is to make a
common interface to multiple databases, thus stopping the need for
application developers to write different modules for each SQL backend
they want to support.  It's also useful for caching data in different
database types.

   To accomplish this, it uses a compatibility layer of functions to
bind input and output variables, prepare statements, and retrieve data.
Functionality and concept are somewhat like perl's DBI, and hopefully
somewhat improved.

   Currently there are modules for MySQL, Oracle, PostgreSQL, and
SQLite3.  Most features work in most modules, but all don't work
everywhere yet, so please see the file `README.modules' from the source
distribution for details.

* Menu:

* Where to get::
* Reporting bugs::
* Contributing::


File: yada.info,  Node: Where to get,  Next: Reporting bugs,  Up: Introduction

1.1 Where to get
================

The latest version of yada is always available via http from
`http://oss.devit.com/yada' or via ftp from `ftp://ftp.devit.com/yada/'.


File: yada.info,  Node: Reporting bugs,  Next: Contributing,  Prev: Where to get,  Up: Introduction

1.2 Reporting bugs
==================

We welcome bug reports and suggestions for any aspect of yada, please
email them to <yada@devit.com>.

   For bug reports, please include enough information for us to
reproduce the problem.  Generally speaking, that means:

   * the version number of yada and any other programs involved.

   * hardware and operating system names and versions.

   * the schema for any tables necessary to reproduce the bug.

   * a description of the problem and samples of any erroneous output.

   * any unusual options you gave to `configure'.

   * anything else that you think would be helpful.

   When in doubt whether something is needed or not, include it.  It's
better to include too much than to leave out something important.


File: yada.info,  Node: Contributing,  Prev: Reporting bugs,  Up: Introduction

1.3 Contributing
================

Patches are most welcome; if possible, please make them with `diff -c'
and include `ChangeLog' entries.

   When sending patches, if possible please do not encode or split them
in any way; it's much easier to deal with one plain text message,
however large, than many small ones.


File: yada.info,  Node: Installing,  Next: API,  Prev: Introduction,  Up: Top

2 Installing
************

To use the default options, simply type

   `./configure'

   `make'

   `make install'

2.1 configuring
===============

`configure' with options you want

   Some notable ones are:

`--enable-debug'
     Compiles with -g and enables debugging messages written to stderr.
     To just compile with -g, set the environment variable `CFLAGS'
     accordingly.

`--enable-ltdl-install'
     Force the installation of the bundled libltdl

   Currently supported database types:
`--with[out]-mysql'
     MySQL

`--with[out]-oracle'
     Oracle

`--with[out]-pgsql'
     PostgreSQL

`--with[out]-sqlite3'
     SQLite 3

2.2 Configuring for different database types
============================================

`--with-DB_TYPE[=`DIR']'
     Look under `DIR' for includes and libs

`--with-DB_TYPE-incdir=`DIR''
     Look in `DIR' for includes

`--with-DB_TYPE-libdir=`DIR''
     Look in `DIR' for libs

   There are a few options for defining the proper locations for
database libraries. `--with-DB_TYPE', the default, will search common
installation locations.  If you set `--with-DB_TYPE='`DIR' it will look
in `DIR/include' and `DIR/lib' for headers and libraries respectively.
To get more specific, you may use `--with-DB_TYPE-incdir='`DIR'
`--with-DB_TYPE-libdir='`DIR' to set each of the directories where the
files can be found.

   When configure is done, to install simply:

   `make'

   `make install'


File: yada.info,  Node: API,  Next: Module API,  Prev: Installing,  Up: Top

3 API
*****

To use yada, you must first initialize the library with `*Note
yada_init::'() which will return a pointer to a yada object.  The
object may then be used to call the other functions as pointers from
the base obj (i.e., `yada->*Note connect::()').

   If at any time a yada function returns an error, error code may be
checked at `yada->*Note error::' and error message at `yada->*Note
errmsg::', except for *Note `yada_init()': yada_init, in which case
error will be stored in errno.

* Menu:

* Control functions::
* Statement preparation::
* Statement execution::
* Result retrieval::
* Transactions::
* Variables::
* Resource types::
* Token types::


File: yada.info,  Node: Control functions,  Next: Statement preparation,  Up: API

3.1 Control functions
=====================

* Menu:

* yada_init::
* connect::
* disconnect::
* destroy::
* free::
* freeall::


File: yada.info,  Node: yada_init,  Next: connect,  Up: Control functions

`yada_t* yada_init(char *dbstr, unsigned int flags)'
----------------------------------------------------

PARAMETERS

DBSTR
     a string defining the yada database to initialize

FLAGS
     currently unused

RETURNS

ON SUCCESS
     yada struct pointer

ON FAILURE
     NULL

   Initializes the yada library and returns a pointer to a yada object
of the database type specified in `db_str', a string made up of DATABASE
TYPE:[TYPE SPECIFIC CONNECTION OPTIONS].  Once this is done, the other
functions may be called from this base obj (i.e., `yada->connect()').


File: yada.info,  Node: connect,  Next: disconnect,  Prev: yada_init,  Up: Control functions

`int connect(yada_t *yada, char *user, char *pass)'
---------------------------------------------------

PARAMETERS

USER
     username for database connection, if needed

PASS
     password for database connection, if needed

RETURNS

ON SUCCESS
     non-zero

ON FAILURE
     0

   Attempts to connect to the database defined in the `db_str' passed to
`yada_init()', using user and pass if needed by the database type being
connected to.


File: yada.info,  Node: disconnect,  Next: destroy,  Prev: connect,  Up: Control functions

`void disconnect(yada_t *yada)'
-------------------------------

Disconnect from the database.


File: yada.info,  Node: destroy,  Next: free,  Prev: disconnect,  Up: Control functions

`void destroy(yada_t* yada)'
----------------------------

Closes the database connection, frees all memory used by yada, and
therefore invalidates the yada struct.


File: yada.info,  Node: free,  Next: freeall,  Prev: destroy,  Up: Control functions

`void free(yada_t *yada, yada_rc_t *yada_rc)'
---------------------------------------------

PARAMETERS

YADA_RC
     pointer to the yada resource to free

   Frees the resource pointed to by YADA_RC.


File: yada.info,  Node: freeall,  Prev: free,  Up: Control functions

`void freeall(yada_t *yada, int type)'
--------------------------------------

PARAMETERS

TYPE
     OR-able set of *Note Resource types:: or -1 for all

   Frees all memory used by yada resources of type TYPE, an OR-able set
of *Note Resource types::.  If type is -1, it will free all resources.


File: yada.info,  Node: Statement preparation,  Next: Statement execution,  Prev: Control functions,  Up: API

3.2 Statement preparation
=========================

These functions prepare a string for execution, allowing mapping of
input variables to be passed to execute.  Preparing will be done either
by native database prepares, or by yada prepare.

   Yada prepare is a bit less strict that most databases are, so it's
possible to put a placeholder anywhere, including SQL commands or table
names.

* Menu:

* prepare::
* preparef::
* yprepare::
* ypreparef::
* xprepare::


File: yada.info,  Node: prepare,  Next: preparef,  Up: Statement preparation

`yada_rc_t* prepare(yada_t *yada, char *str, int strlen)'
---------------------------------------------------------

PARAMETERS

STR
     statement to be prepared

STRLEN
     length of the string, or 0 for a null terminated string

RETURNS

ON SUCCESS
     yada resource pointing to the prepared statement

ON FAILURE
     NULL

   Prepares a string for execution using the native database prepared
statements if available, if not falls back to *Note yprepare::().


File: yada.info,  Node: preparef,  Next: yprepare,  Prev: prepare,  Up: Statement preparation

`yada_rc_t* preparef(yada_t *yada, char *format, ...)'
------------------------------------------------------

PARAMETERS

FORMAT
     format of string to be prepared

...
     arguments to format

RETURNS

ON SUCCESS
     yada resource pointing to the prepared statement

ON FAILURE
     NULL

   Creates a string from FORMAT and it's arguments using standard printf
tokens and then uses it to prepares a statement.  Uses the database's
native prepared statements if available, if not falls back to *Note
ypreparef::().


File: yada.info,  Node: yprepare,  Next: ypreparef,  Prev: preparef,  Up: Statement preparation

`yada_rc_t* yprepare(yada_t *yada, char *str, int strlen)'
----------------------------------------------------------

PARAMETERS

STR
     statement to be prepared

STRLEN
     length of the string, or 0 for a null terminated string

RETURNS

ON SUCCESS
     yada resource pointing to the prepared statement

ON FAILURE
     NULL

   Prepares a string for execution using yada prepared statements.


File: yada.info,  Node: ypreparef,  Next: xprepare,  Prev: yprepare,  Up: Statement preparation

`yada_rc_t* ypreparef(yada_t *yada, char *format, ...)'
-------------------------------------------------------

PARAMETERS

FORMAT
     format of string to be prepared

...
     arguments to format

RETURNS

ON SUCCESS
     yada resource pointing to the prepared statement

ON FAILURE
     NULL

   Creates a string from FORMAT and it's arguments using standard printf
tokens and then uses it to prepares a statement.  Uses the yada prepared
statements.


File: yada.info,  Node: xprepare,  Prev: ypreparef,  Up: Statement preparation

`yada_rc_t* xprepare(yada_t *yada, int flags, char *str, ...)'
--------------------------------------------------------------

PARAMETERS

FLAGS
     prepare options

STR
     statement to be prepared

...
     arguments to prepare

RETURNS

ON SUCCESS
     yada resource pointing to the prepared statement

ON FAILURE
     NULL

   Extensible prepare, uses FLAGS options to decide how to prepare the
statement.  This is for future use, as right now the only flag
combinations can be done with the above 4 statements.


File: yada.info,  Node: Statement execution,  Next: Result retrieval,  Prev: Statement preparation,  Up: API

3.3 Statement execution
=======================

* Menu:

* execute::
* query::
* dumpexec::


File: yada.info,  Node: execute,  Next: query,  Up: Statement execution

`int execute(yada_t *yada, void *magic, ...)'
---------------------------------------------

PARAMETERS

MAGIC
     Statement to execute, either a statement string or a prepared
     `yada_rc*'

...
     if MAGIC is a string, should be it's length or 0 for NULL
     terminated

     if MAGIC is a prepared `yada_rc*', placeholder variables should
     follow

RETURNS

ON SUCCESS
     number of rows affected

ON FAILURE
     -1

   Executes the statement, doesn't not return results so it shouldn't
be used for select type statements;


File: yada.info,  Node: query,  Next: dumpexec,  Prev: execute,  Up: Statement execution

`yada_rc_t* query(yada_t *yada, void *magic, ...)'
--------------------------------------------------

PARAMETERS

MAGIC
     Statement to execute, either a statement string or a prepared
     resource(`yada_rc*')

...
     if MAGIC is a string, should be it's length or 0 for NULL
     terminated

     if MAGIC is a prepared resource, placeholder variables should
     follow

RETURNS

ON SUCCESS
     resource containing a result set

ON FAILURE
     NULL

   Executes the statement and returns a result set resource


File: yada.info,  Node: dumpexec,  Prev: query,  Up: Statement execution

`char* dumpexec(yada_t *yada, int *retlen,  yada_rc_t *prep, ...)'
------------------------------------------------------------------

*Note* only works with yprepared statements

PARAMETERS

RETLEN
     if not NULL, the length of the returned string will be put into it

PREP

...
     placeholder variables if needed for PREP

RETURNS

ON SUCCESS
     string of the processed statement

ON FAILURE
     NULL

   Functions exactly the same as execute, only instead of executing the
statement once it's compiled, it returns it as a string.


File: yada.info,  Node: Result retrieval,  Next: Transactions,  Prev: Statement execution,  Up: API

3.4 Result retrieval
====================

* Menu:

* bind::
* fetch::


File: yada.info,  Node: bind,  Next: fetch,  Up: Result retrieval

`yada_rc_t* bind(yada_t *yada, char *map, ...)'
-----------------------------------------------

PARAMETERS

MAP
     string containing a list of the variable types

...
     list of the variables to bind

RETURNS

ON SUCCESS
     resource containing a bind set

ON FAILURE
     NULL

   Makes a mapping of variables to results.  It expects pointers to
actual storage space to put the variable into, or if the type is
preceded by `p', expects a pointer to a pointer which will be set to
the retrieved data that will be stored internally.

   For example, to bind directly to an int and as a pointer to a
string, you would do something like this:

     `brc = yada->bind(yada, "?d?ps", (int *)&i, (char **)&str);'

   *Note Token types::, for a list of the supported variables types.

   *Note fetch: fetch-null-column, for information on how fetch treats
these variables when a column is null, see


File: yada.info,  Node: fetch,  Prev: bind,  Up: Result retrieval

`int fetch(yada_t *yada, yada_rc_t *res, yada_rc_t *bindset)'
-------------------------------------------------------------

PARAMETERS

RES
     result set resource

BINDSET
     bind set resource

RETURNS

ON SUCCESS
     non zero

ON FAILURE
     0

   Retrieves the next row of results into the variables mapped by
BINDSET.

   If a column is NULL:
   * binary length variables will be unset

   * pointer variables will be set to NULL

   * the first byte of strings will be set to NULL


File: yada.info,  Node: Transactions,  Next: Variables,  Prev: Result retrieval,  Up: API

3.5 Transactions
================

* Menu:

* trx::
* commit::
* rollback::


File: yada.info,  Node: trx,  Next: commit,  Up: Transactions

`int trx(yada_t* yada, int flags)'
----------------------------------

PARAMETERS

FLAGS
     unused

RETURNS

ON SUCCESS
     0

ON FAILURE
     non-zero

   Begins a transaction, flags (currently unused) will allow you to
start different types of transactions.


File: yada.info,  Node: commit,  Next: rollback,  Prev: trx,  Up: Transactions

`int commit(yada_t* yada)'
--------------------------

RETURNS

ON SUCCESS
     0

ON FAILURE
     non-zero

   Commit the current transaction causing any changes made to be saved.


File: yada.info,  Node: rollback,  Prev: commit,  Up: Transactions

`int rollback(yada_t* yada, int flags)'
---------------------------------------

PARAMETERS

FLAGS
     unused

RETURNS

ON SUCCESS
     0

ON FAILURE
     non-zero

   Rollback the current transaction undoing any transactional changes.


File: yada.info,  Node: Variables,  Next: Resource types,  Prev: Transactions,  Up: API

3.6 Variables
=============

Read only variables available on the yada struct.

* Menu:

* error::
* errmsg::


File: yada.info,  Node: error,  Next: errmsg,  Up: Variables

`int error'
-----------

Error code of the last error that occurred.


File: yada.info,  Node: errmsg,  Prev: error,  Up: Variables

`char *errmsg'
--------------

Error message for the last error that occurred.


File: yada.info,  Node: Resource types,  Next: Token types,  Prev: Variables,  Up: API

3.7 Resource types
==================

"YADA_STATEMENT"
     prepared statements returned from `prepare()'

"YADA_RESULT"
     result sets returned from `query()'

"YADA_BINDSET"
     bind sets as returned from `bind()'


File: yada.info,  Node: Token types,  Prev: Resource types,  Up: API

3.8 Token types
===============

Yada tokens are used to define variable types in both `prepare()' and
`bind()'.  Tokens are specified with a question mark (`?') followed by
the letter for the type.  To specify the variable is a pointer, use a
question mark followed by a `p' and then followed by the type letter.
Currently this is only used in `bind()'.

   Token types are as follows:

"a"
     escaped binary string

"b"
     binary string - a binary string is a pair of variables, a `char*'
     string, and an `unsigned long' length. Whenever you need to pass
     the string variable, you should pass the length variable next.
     When used with `bind()' and an execute function is called, the len
     variable is always an `unsigned long' and never a pointer, even if
     the binary string is a pointer (`?pb').

"d"
     32 bit integer, signed or unsigned

"e"
     escaped string

"l"
     64 bit integer, signed or unsigned

"s"
     string - NULL terminated `char*'

"v"
     variable - a variable is like an escaped string except yada will
     surround it with single quotes (`'') if it's set, or replace it
     with the with the string `NULL' if null.

     Escaped variables are the same as the variable, except any
     characters        needing escaping are escaped (this differs with
     the type of database it        is).


File: yada.info,  Node: Module API,  Next: Examples,  Prev: API,  Up: Top

4 Module API
************

This is where the documentation and internal API description for making
yada modules will go.  Until then, grab an already made module and
start from there, the code is fairly well documented.


File: yada.info,  Node: Examples,  Next: Index,  Prev: Module API,  Up: Top

5 Examples
**********

Here is a simple example showing how to do a basic prepared insert, and
bind to an output variable.  For more examples, see test/yada_test.c in
the source distribution.


  int intcol;
  yada_t *yada;
  yada_rc_t *brc, *res, *stmt;


  /* init and connect to yada */
  if(!(yada = yada_init("mysql:localhost", 0))) {
    errmsg("Failed to initialize yada: %s\n", strerror(errno));
    return(1);
  }

  /* prepare insert statement */
  if(!(stmt = yada->yprepare(yada, "insert into test (intcol) values (?d)", 0))) {
    errmsg("Failed to prepare insert: %s\n", yada->errmsg);
    yada->destroy(yada);
    return(1);
  }

  /* bind column to intcol */
  if(!(brc = yada->bind(yada, "?d", &intcol))) {
  }

  /* connect to database */
  if(!yada->connect(yada, "scott", "tiger")) {
    errmsg("Failed to connect: %s\n", yada->errmsg);
    yada->destroy(yada);
    return(1);
  }

  /* insert a row */
  if(yada->execute(yada, stmt, 5) == -1) {
    errmsg("Failed to insert: %s\n", yada->errmsg);
    yada->destroy(yada);
    return(1);
  }

  /* free prepared insert statement */
  yada->free(stmt);

  /* query all rows */
  if(!(res = yada->query(yada, "select intcol from yada_test", 0))) {
    errmsg("Failed to insert: %s\n", yada->errmsg);
    yada->destroy(yada);
    return(1);
  }

  /* fetch rows one at a time */
  while(yada->fetch(yada, res, brc))
    printf("intcol: %d\n", intcol);

  /* check for error */
  if(yada->error) {
    errmsg("error fetching row: %s", yada->errmsg);
    yada->destroy(yada);
    return(1);
  }

  /* disconnect and free everything */
  yada->destroy(yada);
  return(0);


File: yada.info,  Node: Index,  Prev: Examples,  Up: Top

6 Index
*******

 [index ]
* Menu:

* bind:                                  Result retrieval.     (line 11)
* commit:                                trx.                  (line 22)
* connect:                               yada_init.            (line 27)
* destroy:                               disconnect.           (line  8)
* disconnect:                            connect.              (line 26)
* dumpexec:                              query.                (line 29)
* errmsg:                                error.                (line  8)
* error:                                 Variables.            (line 13)
* execute:                               Statement execution.  (line 12)
* fetch:                                 bind.                 (line 37)
* free:                                  destroy.              (line  9)
* freeall:                               free.                 (line 13)
* prepare:                               Statement preparation.
                                                               (line 22)
* preparef:                              prepare.              (line 25)
* query:                                 execute.              (line 30)
* rollback:                              commit.               (line 16)
* trx:                                   Transactions.         (line 12)
* xprepare:                              ypreparef.            (line 26)
* YADA_BINDSET:                          Resource types.       (line 12)
* yada_init:                             Control functions.    (line 15)
* YADA_RESULT:                           Resource types.       (line  9)
* YADA_STATEMENT:                        Resource types.       (line  6)
* yprepare:                              preparef.             (line 27)
* ypreparef:                             yprepare.             (line 24)



Tag Table:
Node: Top504
Node: Introduction725
Node: Where to get1724
Node: Reporting bugs1976
Node: Contributing2842
Node: Installing3240
Node: API4757
Node: Control functions5502
Node: yada_init5716
Node: connect6357
Node: disconnect6894
Node: destroy7084
Node: free7341
Node: freeall7631
Node: Statement preparation8001
Node: prepare8582
Node: preparef9129
Node: yprepare9748
Node: ypreparef10247
Node: xprepare10802
Node: Statement execution11403
Node: execute11609
Node: query12222
Node: dumpexec12835
Node: Result retrieval13452
Node: bind13627
Node: fetch14595
Ref: fetch-null-column14993
Node: Transactions15157
Node: trx15327
Node: commit15656
Node: rollback15920
Node: Variables16228
Node: error16430
Node: errmsg16564
Node: Resource types16708
Node: Token types17019
Node: Module API18439
Node: Examples18737
Node: Index20453

End Tag Table
